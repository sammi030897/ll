package com.app.core;

public class Node {
	int data;
	Node next;

	Node(int data) {
		this.data = data;
		this.next = null;
	}
}
package com.app.core;

import java.util.Scanner;

public class Main {

	public static void main(String[] args) {
		SingleLinkedList list = new SingleLinkedList();
		Scanner scanner = new Scanner(System.in);
		int choice;
		int data;
		int position;

		do {
			System.out.println("\nMenu:");
			System.out.println("1. Add First");
			System.out.println("2. Add Last");
			System.out.println("3. Insert at Position");
			System.out.println("4. Delete First");
			System.out.println("5. Delete Last");
			System.out.println("6. Delete at Position");
			System.out.println("7. Print List");
			System.out.println("8. Sort List");
			System.out.println("9. Remove Duplicates");
			System.out.println("10. Count Elements");
			System.out.println("11. Search Data");
			System.out.println("12. Exit");

			System.out.print("Enter your choice: ");
			choice = scanner.nextInt();

			switch (choice) {
			case 1:
				System.out.print("Enter data to add at the beginning: ");
				data = scanner.nextInt();
				list.addFirst(data);
				break;
			case 2:
				System.out.print("Enter data to add at the end: ");
				data = scanner.nextInt();
				list.addLast(data);
				break;
			case 3:
				System.out.print("Enter data to insert: ");
				data = scanner.nextInt();
				System.out.print("Enter position to insert at: ");
				position = scanner.nextInt();
				list.insertAtPosition(data, position);
				break;
			case 4:
				list.deleteFirst();
				System.out.println("First node deleted.");
				break;
			case 5:
				list.deleteLast();
				System.out.println("Last node deleted.");
				break;
			case 6:
				System.out.print("Enter position to delete: ");
				position = scanner.nextInt();
				list.deleteAtPosition(position);
				break;
			case 7:
				System.out.print("List: ");
				list.printList();
				break;
			case 8:
				list.sortList();
				System.out.println("List sorted in ascending order.");
				break;
			case 9:
				list.removeDuplicates();
				System.out.println("Duplicates removed from the list.");
				break;
			case 10:
				int count = list.countElements();
				System.out.println("Number of elements in the list: " + count);
				break;
			case 11:
				System.out.print("Enter data to search: ");
				data = scanner.nextInt();
				if (list.searchData(data)) {
					System.out.println("Data found in the list.");
				} else {
					System.out.println("Data not found in the list.");
				}
				break;
			case 12:
				System.out.println("Exiting...");
				break;
			default:
				System.out.println("Invalid choice. Please enter a valid option.");
				break;
			}

		} while (choice != 12);

		scanner.close();
	}
}
package com.app.core;

public class SingleLinkedList {
	private Node head;

	public SingleLinkedList() {
		this.head = null;
	}

	// Add a node at the beginning of the list
	public void addFirst(int data) {
		Node newNode = new Node(data);
		newNode.next = head;
		head = newNode;
	}

	// Add a node at the end of the list
	public void addLast(int data) {
		Node newNode = new Node(data);
		if (head == null) {
			head = newNode;
		} else {
			Node current = head;
			while (current.next != null) {
				current = current.next;
			}
			current.next = newNode;
		}
	}

	// Insert a node at a specified position
	public void insertAtPosition(int data, int position) {
		Node newNode = new Node(data);
		if (position == 0) {
			newNode.next = head;
			head = newNode;
		} else {
			Node current = head;
			int count = 0;
			while (current != null && count < position - 1) {
				current = current.next;
				count++;
			}
			if (current != null) {
				newNode.next = current.next;
				current.next = newNode;
			} else {
				System.out.println("Invalid position.");
			}
		}
	}

	// Delete the first node
	public void deleteFirst() {
		if (head != null) {
			head = head.next;
		}
	}

	// Delete the last node
	public void deleteLast() {
		if (head == null)
			return;

		if (head.next == null) {
			head = null;
			return;
		}

		Node current = head;
		Node previous = null;
		while (current.next != null) {
			previous = current;
			current = current.next;
		}
		previous.next = null;
	}

	// Delete a node at a specified position
	public void deleteAtPosition(int position) {
		if (head == null)
			return;

		Node current = head;
		if (position == 0) {
			head = current.next;
			return;
		}

		int count = 0;
		Node previous = null;
		while (current != null && count < position) {
			previous = current;
			current = current.next;
			count++;
		}

		if (current == null)
			return;

		previous.next = current.next;
	}

	// Print the list
	public void printList() {
		Node current = head;
		while (current != null) {
			System.out.print(current.data + " ");
			current = current.next;
		}
		System.out.println();
	}

	// Sort the list (ascending order)
	public void sortList() {
		Node current = head, index = null;
		int temp;

		if (head == null) {
			return;
		} else {
			while (current != null) {
				// Node index will point to the node next to current
				index = current.next;

				while (index != null) {
					// If current node's data is greater than index's node data, swap the data
					if (current.data > index.data) {
						temp = current.data;
						current.data = index.data;
						index.data = temp;
					}
					index = index.next;
				}
				current = current.next;
			}
		}
	}

	// Remove duplicates from the list
	public void removeDuplicates() {
		Node current = head;
		while (current != null) {
			Node temp = current;
			while (temp != null && temp.data == current.data) {
				temp = temp.next;
			}
			current.next = temp;
			current = current.next;
		}
	}

	// Count the number of elements in the list
	public int countElements() {
		int count = 0;
		Node current = head;
		while (current != null) {
			count++;
			current = current.next;
		}
		return count;
	}

	// Search for a specific data in the list
	public boolean searchData(int data) {
		Node current = head;
		while (current != null) {
			if (current.data == data) {
				return true;
			}
			current = current.next;
		}
		return false;
	}

}
